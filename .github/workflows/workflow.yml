name: Deploy Setting

on:
  push:
    branches:
      - main # 이 브랜치에 푸시하면 배포가 실행됨

jobs:
  deploy:
    runs-on: ubuntu-24.04
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
      # Gradle 캐싱으로 빌드 속도 개선
      - name: Cache Gradle dependencies
        uses: actions/cache@v3
        with:
          # 캐시 경로: Gradle 캐시와 래퍼 파일
          path: |
            ~/.gradle/caches
            ~/.gradle/wrapper
          # 캐시 키: OS와 Gradle 파일 해시로 고유성 보장
          key: ${{ runner.os }}-gradle-${{ hashFiles('**/*.gradle*', '**/gradle-wrapper.properties') }}
          # 복원 키: 이전 캐시 재사용 가능
          restore-keys: ${{ runner.os }}-gradle-
      # Java setting(러너에서 빌드용)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      # Gradle 로 빌드(# 테스트 제외하고 JAR 생성)
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          if ! ./gradlew build -x test; then
            echo "❌ Gradle build failed"
            exit 1
          fi
          echo "✅ Build successful"
          ls -lh build/libs/
          if [ ! -f build/libs/app.jar ] || ! jar tf build/libs/app.jar; then
            echo "❌ app.jar not found or invalid"
            exit 1
          fi
          echo "✅ app.jar verified"

      # SSH 로 EC2에 배포
      - name: Deploy to EC2
        env:
          # 환경 변수로 민감 정보 정의
          PRIVATE_KEY: ${{ secrets.SERVER_PEMKEY }}
          HOST: ${{secrets.SERVER_HOST}}
          USER: ${{secrets.SERVER_USER}}
          DATA_MONGODB_HOST: ${{ secrets.DATA_MONGODB_HOST }}
          DATA_MONGODB_PORT: ${{ secrets.DATA_MONGODB_PORT }}
          DATA_MONGODB_DATABASE: ${{ secrets.DATA_MONGODB_DATABASE }}
          DATA_MONGODB_AUTHENTICATIONDATABASE: ${{ secrets.DATA_MONGODB_AUTHENTICATIONDATABASE }}
          DATA_MONGODB_USERNAME: ${{ secrets.DATA_MONGODB_USERNAME }}
          DATA_MONGODB_PASSWORD: ${{ secrets.DATA_MONGODB_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_SECRET_EXPIRATIONTIME: ${{ secrets.JWT_SECRET_EXPIRATIONTIME }}
        run: |
          # SSH 키 설정
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key
          
          # SSH 연결 테스트 및 디렉토리 준비
          ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$HOST "mkdir -p /home/$USER/app/ && chmod 755 /home/$USER/app/ && echo 'SSH works'" || { echo "❌ SSH connection or directory setup failed"; exit 1; }
          echo "✅ SSH connection successful"

          # rsync로 파일 전송
          echo "Transferring app.jar to EC2 with rsync..."
          rsync -avz --exclude '*-plain.jar' -e "ssh -i private_key -o StrictHostKeyChecking=no" ./build/libs/app.jar $USER@$HOST:/home/$USER/app/app-new.jar || { echo "❌ rsync failed"; exit 1; }
          echo "✅ File transfer completed"

          # EC2 연결
          ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$HOST << "EOF" || { echo "❌ssh failed"; exit 1; }
            echo "✅SSH connection successful"
          
          # 환경 변수 설정 (민감 정보 설정)
          export HOST="${{ secrets.HOST }}"
          export DATA_MONGODB_HOST="${{ secrets.DATA_MONGODB_HOST }}"
          export DATA_MONGODB_PORT="${{ secrets.DATA_MONGODB_PORT }}"
          export DATA_MONGODB_DATABASE="${{ secrets.DATA_MONGODB_DATABASE }}"
          export DATA_MONGODB_AUTHENTICATIONDATABASE="${{ secrets.DATA_MONGODB_AUTHENTICATIONDATABASE }}"
          export DATA_MONGODB_USERNAME="${{ secrets.DATA_MONGODB_USERNAME }}"
          export DATA_MONGODB_PASSWORD="${{ secrets.DATA_MONGODB_PASSWORD }}"
          export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
          export JWT_SECRET_EXPIRATIONTIME="${{ secrets.JWT_SECRET_EXPIRATIONTIME }}"          
          
          # 새 JAR(app-new.jar)를 8081 포트에서 실행
          echo "Starting new JAR on port 8081..."
          nohup java -jar /home/$USER/app/app-new.jar --server.port=8081 > /home/$USER/app/app-new.log 2>&1 &
          NEW_PID=$!
          sleep 20  # 새 버전 시작 대기
          echo "✅ New version started on port 8081 with PID: $NEW_PID"
          
          # 헬스 체크 (8081 포트에서 실행 중일 때)
          echo "Performing health check on port 8081 with HOST: $HOST..."
          for i in {1..5}; do
            echo "Health check attempt $i..."
            curl -v "http://${HOST}:8081/actuator/health" > /home/$USER/app/health-check.log 2>&1
            if [ $? -eq 0 ]; then
              echo "✅ Health check passed on port 8081"
              cat /home/$USER/app/health-check.log
              break
            else
              echo "Health check attempt $i failed, response logged to /home/$USER/app/health-check.log"
              cat /home/$USER/app/health-check.log
              echo "Retrying in 5 seconds..."
              sleep 5
          fi
          done
          if [ $i -eq 5 ]; then
            echo "❌ Health check failed after 5 attempts on port 8081, terminating process..."
            kill -9 $NEW_PID
            exit 1
          fi
          
          # 기존 8080 포트 프로세스 종료
          OLD_PID=$(ps aux | grep '[j]ava -jar /home/$USER/app/app.jar' | awk '{print $2}')
          if [ -n "$OLD_PID" ]; then
            echo "Killing old process on port 8080 with PID: $OLD_PID"
            kill -9 $OLD_PID
            sleep 2  # 기존 프로세스 종료 대기
          else
            echo "No existing process on port 8080"
          fi
          
          # 기존 app.jar 백업 (타임스탬프 추가)
          if [ -f /home/$USER/app/app.jar ]; then
            TIMESTAMP=$(date +%Y%m%d_%H%M%S)
            mkdir -p /home/$USER/app/backups
            mv /home/$USER/app/app.jar /home/$USER/app/backups/app_$TIMESTAMP.jar
            echo "Backed up existing JAR to /home/$USER/app/backups/app_$TIMESTAMP.jar"
          fi
        
          # 새 버전을 8080 포트로 전환
          echo "Switching to port 8080..."
          kill -9 $NEW_PID  # 8081 프로세스 종료
          mv /home/$USER/app/app-new.jar /home/$USER/app/app.jar
          nohup java -jar /home/$USER/app/app.jar > /home/$USER/app/app.log 2>&1 &
          FINAL_PID=$!
          sleep 10  # 8080 시작 대기
          echo "✅ Deployment successful on port 8080 with PID: $FINAL_PID"
          echo $FINAL_PID > /home/$USER/app/app.pid
          EOF
          echo "✅ Deployment finished"