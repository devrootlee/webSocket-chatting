name: Deploy Setting

on:
  push:
    branches:
      - main # 이 브랜치에 푸시하면 배포가 실행됨


jobs:
  deploy:
    runs-on: ubuntu-24.04
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
      # property 세팅
      - name: Set property
        run: |
          echo "spring.data.mongodb.host=${{ secrets.DATA_MONGODB_HOST }}" > ./src/main/resources/application.yml
          echo "spring.data.mongodb.port=${{ secrets.DATA_MONGODB_PORT }}" >> ./src/main/resources/application.yml
          echo "spring.data.mongodb.database=${{ secrets.DATA_MONGODB_DATABASE }}" >> ./src/main/resources/application.yml
          echo "spring.data.mongodb.authentication-database=${{ secrets.DATA_MONGODB_AUTHENTICATIONDATABASE}}" >> ./src/main/resources/application.yml
          echo "spring.data.mongodb.username=${{ secrets.DATA_MONGODB_USERNAME }}" >> ./src/main/resources/application.yml
          echo "spring.data.mongodb.password=${{ secrets.DATA_MONGODB_PASSWORD }}" >> ./src/main/resources/application.yml
          
          echo "jwt.secretkey=${{ secrets.JWT_SECRETKEY }}" >> ./src/main/resources/application.yml
          echo "jwt.expiration-time=${{ secrets.JWT_EXPIRATIONTIME }}" >> ./src/main/resources/application.yml
      # Java setting(러너에서 빌드용)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      # Gradle 로 빌드(# 테스트 제외하고 JAR 생성)
      - name: Build with Gradle
        run: | 
          chmod +x ./gradlew
          ./gradlew build -x test
      # SSH 로 EC2에 배포
      - name: Deploy to EC2
        env:
          PRIVATE_KEY: ${{ secrets.SERVER_PEMKEY }}
          HOST: ${{secrets.SERVER_HOST}}
          USER: ${{secrets.SERVER_USER}}
        run: |
          # SSH 키 설정
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key
          
          # 서버에 JAR 파일 전송
          rsync -avz --exclude '*-plain.jar' -e "ssh -i private_key -o StrictHostKeyChecking=no" ./build/libs/*.jar $USER@$HOST:/home/$USER/app/
          
          # EC2 연결
          ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$HOST << 'EOF'
            echo 'SSH connection successful'
          
            # 디렉토리 확인 or 생성
            mkdir -p /home/$USER/app/
            ls -lh /home/$USER/app/
          
            # 기존 Java 프로세스 종료
            echo "Finding and killing existing Java process..."
            pid=$(ps aux | grep '[j]ava -jar /home/'"$USER"'/app/.*\.jar' | awk '{print $2}')
            if [ -n "$pid" ]; then
              echo "Killing process with PID: $pid"
              kill -9 $pid
              sleep 2  # 프로세스가 완전히 종료될 때까지 대기
            else
              echo "No existing Java process found"
            fi          
          
            # 새 프로세스 시작
            nohup java -jar /home/$USER/app/*.jar > /home/$USER/app/app.log 2>&1 &
            pid=$!
            echo "App started with PID: $pid"
            sleep 5
            
            # 프로세스 상태 및 로그 확인
            if [ -z "$pid" ]; then
              echo "Failed to capture PID"
              exit 1
            else
              if ps -p $pid > /dev/null 2>&1; then
                echo "Process is running with PID: $pid"
                echo "Last 10 lines of app.log:"
                tail -n 10 /home/$USER/app/app.log
              else
                echo "Process failed to start"
                echo "Last 10 lines of app.log:"
                tail -n 10 /home/$USER/app/app.log
                exit 1
              fi
            fi
          EOF
          echo "Deployment finished"