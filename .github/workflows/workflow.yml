name: Deploy Setting

on:
  push:
    branches:
      - main # 이 브랜치에 푸시하면 배포가 실행됨


jobs:
  deploy:
    runs-on: ubuntu-24.04
    steps:
      # 코드 체크아웃
      - name: Checkout code
        uses: actions/checkout@v4
      # Java setting(러너에서 빌드용)
      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
      # Gradle 로 빌드(# 테스트 제외하고 JAR 생성)
      - name: Build with Gradle
        run: |
          chmod +x ./gradlew
          ./gradlew build -x test
          echo "Checking JAR contents..."
          jar tf build/libs/*.jar || echo "ERROR: JAR file not found"
      # SSH 로 EC2에 배포
      - name: Deploy to EC2
        env:
      # 환경 변수로 민감 정보 정의
          PRIVATE_KEY: ${{ secrets.SERVER_PEMKEY }}
          HOST: ${{secrets.SERVER_HOST}}
          USER: ${{secrets.SERVER_USER}}
          DATA_MONGODB_HOST: ${{ secrets.DATA_MONGODB_HOST }}
          DATA_MONGODB_PORT: ${{ secrets.DATA_MONGODB_PORT }}
          DATA_MONGODB_DATABASE: ${{ secrets.DATA_MONGODB_DATABASE }}
          DATA_MONGODB_AUTHENTICATIONDATABASE: ${{ secrets.DATA_MONGODB_AUTHENTICATIONDATABASE }}
          DATA_MONGODB_USERNAME: ${{ secrets.DATA_MONGODB_USERNAME }}
          DATA_MONGODB_PASSWORD: ${{ secrets.DATA_MONGODB_PASSWORD }}
          JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
          JWT_SECRET_EXPIRATIONTIME: ${{ secrets.JWT_SECRET_EXPIRATIONTIME }}
        run: |
          # SSH 키 설정
          echo "$PRIVATE_KEY" > private_key
          chmod 600 private_key
          
          # 서버에 JAR 파일 전송
          rsync -avz --exclude '*-plain.jar' -e "ssh -i private_key -o StrictHostKeyChecking=no" ./build/libs/*.jar $USER@$HOST:/home/$USER/app/
          
          # EC2 연결
          ssh -i private_key -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $USER@$HOST << 'EOF'
            echo 'SSH connection successful'
          
            # 디렉토리 확인 or 생성
            mkdir -p /home/$USER/app/
            ls -lh /home/$USER/app/
          
            # 기존 Java 프로세스 종료
            echo "Finding and killing existing Java process..."
            pid=$(ps aux | grep '[j]ava -jar /home/'"$USER"'/app/.*\.jar' | awk '{print $2}')
            if [ -n "$pid" ]; then
              echo "Killing process with PID: $pid"
              kill -9 $pid
              sleep 2  # 프로세스가 완전히 종료될 때까지 대기
            else
              echo "No existing Java process found"
            fi
            
            # 환경 변수 설정 (민감 정보 설정)
            export DATA_MONGODB_HOST="${{ secrets.DATA_MONGODB_HOST }}"
            export DATA_MONGODB_PORT="${{ secrets.DATA_MONGODB_PORT }}"
            export DATA_MONGODB_DATABASE="${{ secrets.DATA_MONGODB_DATABASE }}"
            export DATA_MONGODB_AUTHENTICATIONDATABASE="${{ secrets.DATA_MONGODB_AUTHENTICATIONDATABASE }}"
            export DATA_MONGODB_USERNAME="${{ secrets.DATA_MONGODB_USERNAME }}"
            export DATA_MONGODB_PASSWORD="${{ secrets.DATA_MONGODB_PASSWORD }}"
            export JWT_SECRET_KEY="${{ secrets.JWT_SECRET_KEY }}"
            export JWT_SECRET_EXPIRATIONTIME="${{ secrets.JWT_SECRET_EXPIRATIONTIME }}"
          
            # 새 프로세스 시작            
            nohup java -jar /home/$USER/app/*.jar > /home/$USER/app/app.log 2>&1 &
            pid=$!
            echo "App started with PID: $pid"
            sleep 10 # 서버 가동 대기
          
            # 포트 확인 (8080이 열려 있는지 체크)
            pid=$(lsof -ti :8080)
            if [ -n "$pid" ]; then
              echo "✅ Spring Boot 서버가 정상적으로 8080 포트에서 실행 중입니다. PID: $pid"
              echo $pid > /home/$USER/app/app.pid  # PID 저장
            else
              echo "❌ Spring Boot 서버가 8080 포트에서 실행되지 않음."
              echo "Last 20 lines of app.log:"
              tail -n 20 /home/$USER/app/app.log
              exit 1
            fi
          EOF
          echo "Deployment finished"